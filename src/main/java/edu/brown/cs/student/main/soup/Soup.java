package edu.brown.cs.student.main.soup;

import java.util.*;

/**
 * A state container for this demo. In the soup-making story, this class is a pot of soup. The soup
 * may not be entirely finished (indeed, it's often tempting to add more things to a pot of soup).
 *
 * <p>For the sake of this demo, we'll keep the soup state relatively simple.
 */
public class Soup {
  // Note: Each of the fields match the JSON properties exactly... Moshi IS case-sensitive!
  private String soupName;
  // Note: we make the field 'final' to keep us from overwriting the List itself, not its contents!
  private final List<String> ingredients = new ArrayList<>();
  private boolean isHot;

  /**
   * Constructs a soup with just ingredients... Recipe is still a WIP I suppose...
   *
   * @param ingredients
   */
  public Soup(List<String> ingredients) {
    this.ingredients.addAll(ingredients);
  }

  /**
   * Constructs a full soup! A tried and true recipe that has been past down!
   *
   * @param soupName
   * @param ingredients
   * @param isHot
   */
  public Soup(String soupName, List<String> ingredients, boolean isHot) {
    this.soupName = soupName;
    this.ingredients.addAll(ingredients);
    this.isHot = isHot;
  }

  /**
   * Adds ingredients to the soup!
   *
   * @param ingredient
   */
  public void stirIn(String ingredient) {
    this.ingredients.add(ingredient);
  }

  /**
   * Find the contents of this pot of soup. The object returned is an unmodifiable view: it will be
   * updated as the pot of soup changes, but doesn't allow modifications.
   *
   * @return an immutable view of the contents of this pot of soup
   */
  public List<String> getIngredients() {
    return Collections.unmodifiableList(this.ingredients);
  }

  public String getSoupName() {
    return this.soupName;
  }

  public void setSoupName(String soupName) {
    this.soupName = soupName;
  }

  /**
   * Static factory method to make testing easier. Produces a Soup based on parameters and
   * ingredients. Does *not* produce ActualFlavorExceptions, even if the chef is timid.
   *
   * @param ingredients the set of ingredients to try mixing together
   * @return the new Soup object
   */
  public static Soup buildNoExceptions(String name, List<String> ingredients) {
    Soup result = new Soup(ingredients);
    result.setSoupName(name);
    return result;
  }

  /**
   * Override the toString to be a little more informative.
   *
   * @return
   */
  @Override
  public String toString() {
    if (this.isHot) {
      return "Hot " + this.soupName + " soup with " + this.getIngredients().toString();
    } else {
      return "Cold " + this.soupName + " soup with " + this.getIngredients().toString();
    }
  }

  /** auto-generated by IntelliJ Code -> generate */
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    Soup soup = (Soup) o;
    return Objects.equals(this.ingredients, soup.getIngredients());
  }

  /** auto-generated by IntelliJ Code -> generate */
  @Override
  public int hashCode() {
    return Objects.hash(this.ingredients);
  }
}
